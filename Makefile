# Modules in the project
MODULES := kernel
 
# Environment variables
PATH := $(HOME)/opt/cross/bin:$(PATH)
HOST := i686-elf

# Global flags
CFLAGS  := -MMD -I./includes -O0 -g
ASFLAGS := -felf
LDFLAGS := -fno-use-linker-plugin
ARFLAGS := rc

# Toolchain used to build
AR := $(HOST)-ar
AS := nasm
CC := $(HOST)-gcc

.PHONY: all clean boot
 
# Add whatever should be your default / global target.
all: bin/kernel
 
###################################################################
# What follows are several templates (think "functions"), which are
# later instantiated for each registered module ($(1) being the
# module name).
###################################################################
 
# Including a module's build.mk
define INCLUDE_SUBMAKEFILE
include $(1)/build.mk
endef
 

# Setting a module's build rules for object files in <module>/obj.
define ADD_OBJECT_RULE

$(1)/obj/%.o: $(1)/src/%.c
	@$$(CC) $$(CFLAGS) $$(CFLAGS_$(1)) -c $$< -o $$@

$(1)/obj/%.o: $(1)/src/%.s
	@$$(AS) $$(ASFLAGS) $$(ASFLAGS_$(1)) $$< -o $$@

endef
 

# Setting a module's build rules for executable targets.
define ADD_PROGRAM_RULE

DEPENDENCIES := $(DEPENDENCIES) $(patsubst %,$(2)/obj/%.d,$(basename $($(1)_SOURCES)))

bin/$(1): $(patsubst %,$(2)/obj/%.o,$(basename $($(1)_SOURCES))) $(foreach library,$($(1)_LIBRARIES),lib/$(library))
	@$$(CC) -T$(1)/src/linker.ld $$(LDFLAGS) $$(LDFLAGS_$(2)) $$^ -o $$@

endef
 

# Setting a module's build rules for archive targets.
define ADD_ARCHIVE_RULE

DEPENDENCIES := $(DEPENDENCIES) $(patsubst %,$(2)/obj/%.d,$(basename $($(1)_SOURCES)))

lib/$(1): $(patsubst %,$(2)/obj/%.o,$(basename $($(1)_SOURCES)))
	@$$(AR) $$(ARFLAGS) $$@ $$?

endef
 

# Copying a module's global includes into the global include directory
define COPY_INCLUDES

ifeq ($(wildcard includes/$(1)),)
    $$(shell cp -r $(1)/includes includes/$(1))
endif

endef
 

# Now, instantiating the templates for each module.
$(foreach module,$(MODULES), \
	$(eval $(call INCLUDE_SUBMAKEFILE,$(module))))

$(foreach module,$(MODULES), \
	$(eval $(call ADD_OBJECT_RULE,$(module))))

$(foreach module,$(MODULES), \
	$(eval $(foreach binary,$($(module)_PROGRAM), \
		$(call ADD_PROGRAM_RULE,$(binary),$(module)))))

$(foreach module,$(MODULES), \
	$(eval $(foreach library,$($(module)_ARCHIVE), \
		$(call ADD_ARCHIVE_RULE,$(library),$(module)))))

$(foreach module,$(MODULES), \
	$(eval $(call COPY_INCLUDES,$(module))))


# Include the dependency files (generated by GCC's -MMD option)
-include $(sort $(DEPENDENCIES))

boot: bin/kernel
	qemu-i386 -kernel bin/kernel
 
clean:
	@$(RM) -rf $(foreach mod,$(MODULES),$(mod)/obj/*.o)
	@$(RM) -rf $(foreach mod,$(MODULES),$(mod)/obj/*.d)
	@$(RM) -rf includes/* bin/* lib/*
